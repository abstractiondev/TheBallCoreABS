<#@ template debug="true" hostSpecific="true" #>
<#@ output extension="?" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="..\..\abscommon\CommonInclude\Common\CommonCodeblocks.ttinclude" #>
<#@ include file="InterfaceGeneration.ttinclude" #>
<#   
	// Set abstraction specific type and single file specific extension
	//TransformGenerator< ClassModelAbstractionType >(GenerateRoot, ".designer.cs");	
	GenerateRoot();
#>
<#+ 
	public Tuple<string, string>[] GetGeneratorContent(params string[] xmlFileNames)
	{
		List<Tuple<string, string>> result = new List<Tuple<string, string>>();
		foreach(string xmlFileName in xmlFileNames)
		{
			TheBallCoreAbstractionType abs = LoadXml<TheBallCoreAbstractionType>(xmlFileName);
			if(abs.InstanceOfTheBall.DigitalInterface == null)
				continue;
			CurrentAbstraction = abs;
			this.GenerationEnvironment.Clear();
			string content = TransformText();
			string outputFile = Path.GetFileNameWithoutExtension(xmlFileName) + "_interface.designer.cs";
			result.Add(Tuple.Create(outputFile, content));
		}
		return result.ToArray();
	}
	
	void SetCurrentAbstraction(object abs)
	{
		CurrentAbstraction = ( TheBallCoreAbstractionType ) abs;
	}
	
	TheBallCoreAbstractionType CurrentAbstraction;
	InstanceOfTheBallType CurrInstance;
	
	void GenerateRoot()
	{
		GenerateAbstraction(CurrentAbstraction);
	}

	void GenerateAbstraction(TheBallCoreAbstractionType abstraction)
	{
		InstanceOfTheBallType instance = abstraction.InstanceOfTheBall;
		CurrInstance = instance;
		GenerateInstance(instance);
	}	

	void GenerateInstance(InstanceOfTheBallType instance)
	{
		string domainName = instance.semanticDomainName;
		string domainNameMethodPart = domainName.Replace(".", "_");
		BeginNamespace(instance.semanticDomainName);
#>
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.IO;
using System.Xml;
using System.Linq;
using System.Runtime.Serialization;



<#+
		foreach(var interfaceObject in instance.DigitalInterface.InterfaceModel)
        {
			GenerateInterfaceObject(interfaceObject);

        }
		EndBlock(); // namespace
#>

<#+
	}
	
	void GenerateInterfaceObject(InterfaceObjectType interfaceObject)
	{
		//string semanticDomainName = CurrInstance.semanticDomainName;
		//string objectName = informationObject.name;
		string interfaceObjectName = interfaceObject.name;
#>
			[DataContract]
			public partial class <#= interfaceObjectName #> 
			{
				[DataMember]
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

<#+
			GenerateInterfaceObjectFields(interfaceObject);
#>			
			}
<#+
	}


	void GenerateInterfaceObjectFields(InterfaceObjectType interfaceObject)
    {
		foreach(var field in interfaceObject.InterfaceItems)
        {
			string dataType;
			InterfaceItemType itemType = field as InterfaceItemType;
			ObjectInstanceType objectType = field as ObjectInstanceType;
			dynamic dynField = field;
			string fieldName = dynField.name;
			bool isCollection = dynField.isCollection;
			if(itemType != null)
            {
				dataType = GetPhysicalDataTypeFromLogical(itemType.logicalDataType);
            } else if(objectType != null)
            {
				dataType = objectType.interfaceObjectName;
            } else
				throw new NotSupportedException("Not supported field type: " + field.GetType().Name);
			dataType = isCollection ? "List<" + dataType + ">" : dataType;
			string initializationString = isCollection ? "= new " + dataType + "()" : "";
#>
			[DataMember]
			public <#= dataType #> <#= fieldName #><#= initializationString #>;

<#+
        }
    }

	string GetPhysicalDataTypeFromLogical(InterfaceItemTypeLogicalDataType logicalDataType)
	{
		switch(logicalDataType)
		{
			case InterfaceItemTypeLogicalDataType.Data_Binary:
				return "byte[]";
			case InterfaceItemTypeLogicalDataType.Number:
				return "double";
			case InterfaceItemTypeLogicalDataType.Text_Short:
			case InterfaceItemTypeLogicalDataType.Text_Long:
				return "string";
			case InterfaceItemTypeLogicalDataType.Time_Date:
			case InterfaceItemTypeLogicalDataType.Time_DateTime:
			case InterfaceItemTypeLogicalDataType.Time_Time:
				return "DateTime";
			case InterfaceItemTypeLogicalDataType.TrueOrFalse_Boolean:
				return "bool";
			default:
				throw new NotSupportedException("Logical data type not recognized: " + logicalDataType.ToString());
		}
	}


#>