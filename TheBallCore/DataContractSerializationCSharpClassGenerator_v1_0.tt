<#@ template debug="true" hostSpecific="true" #>
<#@ output extension="?" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="..\..\abscommon\CommonInclude\Common\CommonCodeblocks.ttinclude" #>
<#@ include file="TheBallCore_v1_0.ttinclude" #>
<#   
	// Set abstraction specific type and single file specific extension
	//TransformGenerator< ClassModelAbstractionType >(GenerateRoot, ".designer.cs");	
	GenerateRoot();
#>
<#+ 
	public Tuple<string, string>[] GetGeneratorContent(params string[] xmlFileNames)
	{
		List<Tuple<string, string>> result = new List<Tuple<string, string>>();
		foreach(string xmlFileName in xmlFileNames)
		{
			TheBallCoreAbstractionType abs = LoadXml<TheBallCoreAbstractionType>(xmlFileName);
			CurrentAbstraction = abs;
			this.GenerationEnvironment.Clear();
			string content = TransformText();
			string outputFile = Path.GetFileNameWithoutExtension(xmlFileName) + ".serialization.designer.cs";
			result.Add(Tuple.Create(outputFile, content));
		}
		return result.ToArray();
	}
	
	void SetCurrentAbstraction(object abs)
	{
		CurrentAbstraction = ( TheBallCoreAbstractionType ) abs;
	}
	
	TheBallCoreAbstractionType CurrentAbstraction;
	InstanceOfTheBallType CurrInstance;
	
	void GenerateRoot()
	{
		GenerateAbstraction(CurrentAbstraction);
	}

	InformationObjectType GetInformationObjectByName(string informationObjectName)
    {
		var result = CurrInstance.InformationModel.FirstOrDefault(candidate => candidate.name == informationObjectName);
		if(result == null)
			throw new ArgumentException("Information object not found with name: " + informationObjectName);
		return result;
    }

	void GenerateAbstraction(TheBallCoreAbstractionType abstraction)
	{
		InstanceOfTheBallType instance = abstraction.InstanceOfTheBall;
		CurrInstance = instance;
		GenerateInstance(instance);
	}	

	void GenerateInstance(InstanceOfTheBallType instance)
	{
		string domainName = instance.semanticDomainName;
		string domainNameMethodPart = domainName.Replace(".", "_");
#>


<#+
		BeginNamespace("SER." + instance.semanticDomainName);
#>
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.IO;
using System.Xml;
using System.Linq;
using System.Runtime.Serialization;


<#+
		BeginNamespace("INT");
		GenerateInterfaceModel(instance);
		EndBlock(); // namespace
		foreach(var informationObject in instance.InformationModel)
        {
			GenerateInformationObject(informationObject);

        }
		EndBlock(); // namespace
#>

<#+
	}

	string GetTypeFromInterfaceType(InterfaceItemTypeLogicalDataType logicalInterfaceDataType)
    {
		//InterfaceItemTypeLogicalDataType dataType = (InterfaceItemTypeLogicalDataType) System.Enum.Parse(typeof(InterfaceItemTypeLogicalDataType), logicalInterfaceDataType);
		switch(logicalInterfaceDataType)
        {
			case InterfaceItemTypeLogicalDataType.TrueOrFalse_Boolean:
				return "bool";
			case InterfaceItemTypeLogicalDataType.Data_Binary:
				return "byte[]";
			case InterfaceItemTypeLogicalDataType.Number:
				return "double";
			case InterfaceItemTypeLogicalDataType.Text_Long:
			case InterfaceItemTypeLogicalDataType.Text_Short:
				return "string";
			case InterfaceItemTypeLogicalDataType.Time_Date:
			case InterfaceItemTypeLogicalDataType.Time_DateTime:
			case InterfaceItemTypeLogicalDataType.Time_Time:
				return "DateTime";
			default:
				throw new NotSupportedException("Logical interface data type not supported: " + logicalInterfaceDataType);
        }
    }

	void GenerateInterfaceModel(InstanceOfTheBallType instance)
    {
		if(instance.DigitalInterface == null)
			return;
		foreach(InterfaceObjectType interfaceObject in instance.DigitalInterface.InterfaceModel ?? new InterfaceObjectType[0])
        {
#>
            [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/<#= instance.semanticDomainName #>.INT")]
			public partial class <#= interfaceObject.name #>
			{
<#+
			foreach(var informationField in interfaceObject.InterfaceItems ?? new object[0]) 
			{
				string fieldName;
				string typeName;
				bool isCollection;
				InterfaceItemType iItem = informationField as InterfaceItemType;
				ObjectInstanceType oItem = informationField as ObjectInstanceType;
				if(iItem != null)
                {
					fieldName = iItem.name;
					typeName = GetTypeFromInterfaceType(iItem.logicalDataType);
					isCollection = iItem.isCollection;
                } else if(oItem != null)
                {
					fieldName = oItem.name;
					typeName = oItem.interfaceObjectName;
					isCollection = oItem.isCollection;
                } else 
					throw new NotSupportedException("Field type: " + informationField.GetType().Name + " not supported");
				if(isCollection)
					typeName = typeName + "[]";
#>
				[DataMember]
				public <#= typeName #> <#= fieldName #> { get; set; }
<#+
            }
#>
			}

<#+
        }
    }

	void GenerateInformationObject(InformationObjectType informationObject)
	{
		string semanticDomainName = CurrInstance.semanticDomainName;
		string objectName = informationObject.name;
		string informationObjectName = informationObject.name;
		CollectionForType collType = informationObject.Item as CollectionForType;
		bool isCollection = collType != null;

		InformationItemsType itemsType = informationObject.Item as InformationItemsType;
		bool containsCollection = itemsType != null && itemsType.InformationItem.Any(item => item.isCollection);

		bool provideDefaultCreate = informationObject.provideCreateMethod;
		bool isIndependentMaster = informationObject.isIndependentMaster;
#>
            [DataContract(Namespace = "http://schemas.datacontract.org/2004/07/<#= semanticDomainName #>")]
			[Serializable]
			public partial class <#= informationObjectName #> 
			{

				public <#= informationObjectName #>()
				{
					this.ID = Guid.NewGuid().ToString();
				    this.SemanticDomainName = "<#= semanticDomainName #>";
				    this.Name = "<#= objectName #>";
				}

<#+	
		if(containsCollection == false) {
#>
<#+ } else { #>
		
<#+ } #>

				public string SerializeToXml(bool noFormatting = false)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(<#= informationObjectName #>));
					using (var output = new StringWriter())
					{
						using (var writer = new XmlTextWriter(output))
						{
                            if(noFormatting == false)
						        writer.Formatting = Formatting.Indented;
							serializer.WriteObject(writer, this);
						}
						return output.GetStringBuilder().ToString();
					}
				}

				public static <#= informationObjectName #> DeserializeFromXml(string xmlString)
				{
					DataContractSerializer serializer = new DataContractSerializer(typeof(<#= informationObjectName #>));
					using(StringReader reader = new StringReader(xmlString))
					{
						using (var xmlReader = new XmlTextReader(reader))
							return (<#= informationObjectName #>) serializer.ReadObject(xmlReader);
					}
            
				}

				[DataMember]
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember]
                public string Name { get; set; }

                [DataMember]
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }


<#+
		if(isCollection) {
			CollectionForType collectionItem = informationObject.Item as CollectionForType;
			string contentObjectName = collectionItem.contentInformationObjectName;

			bool isMasterCollection = collectionItem.collectionType == CollectionForTypeCollectionType.Master;
			bool isDerivedCollection = collectionItem.collectionType == CollectionForTypeCollectionType.DerivedFromMaster;
			bool isIndependentCollection = collectionItem.collectionType == CollectionForTypeCollectionType.Independent;
			string derivedMasterCollName = collectionItem.contentInformationObjectName + "Collection";

#>
				
				[DataMember] public List<<#= contentObjectName #>> CollectionContent = new List<<#= contentObjectName #>>();
				private <#= contentObjectName #>[] _unmodified_CollectionContent;

				[DataMember] public bool IsCollectionFiltered;
				private bool _unmodified_IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();
				private string[] _unmodified_OrderFilterIDList;

				public string SelectedIDCommaSeparated
				{
					get
					{
						string[] sourceArray;
						if (OrderFilterIDList != null)
							sourceArray = OrderFilterIDList.ToArray();
						else
							sourceArray = CollectionContent.Select(item => item.ID).ToArray();
						return String.Join(",", sourceArray);
					}
					set 
					{
						if (value == null)
							return;
						string[] valueArray = value.Split(',');
						OrderFilterIDList = new List<string>();
						OrderFilterIDList.AddRange(valueArray);
						OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
					}
				}

				public <#= contentObjectName #>[] GetIDSelectedArray()
				{
					if (IsCollectionFiltered == false || this.OrderFilterIDList == null)
						return CollectionContent.ToArray();
					return
						this.OrderFilterIDList.Select(id => CollectionContent.FirstOrDefault(item => item.ID == id)).Where(item => item != null).ToArray();
				}

				public void RefreshOrderAndFilterListFromContent()
                {
                    if (OrderFilterIDList == null)
                        return;
                    OrderFilterIDList.RemoveAll(item => CollectionContent.Any(colItem => colItem.ID == item) == false);
                }

				private void CopyContentFrom(<#= informationObjectName #> sourceObject)
				{
					CollectionContent = sourceObject.CollectionContent;
					_unmodified_CollectionContent = sourceObject._unmodified_CollectionContent;
				}
				
<#+
		} else {
			GenerateInformationObjectChoice(informationObject, informationObjectName, informationObject.Item);
		}
#>			
			}
<#+
	}

	void GenerateInformationObjectChoice(InformationObjectType informationObject, string informationObjectName, object contentItem)
	{
		InformationItemsType informationItems = contentItem as InformationItemsType;
		InformationObjectContentType objectContent = contentItem as InformationObjectContentType;
		if(informationItems != null) {
			GenerateInformationItemsMethods(informationObjectName, informationItems.InformationItem);
			GenerateInformationItems(informationItems.InformationItem);
		}
		if(objectContent != null)
			GenerateInformationObjectContent(informationObject, informationObjectName, objectContent);
	}

	void GenerateInformationObjectContent(InformationObjectType informationObject, string informationObjectName, InformationObjectContentType objectContent)
	{
	}

	void GenerateInformationItemsMethods(string informationObjectName, InformationItemType[] informationItems)
	{
		InformationItemType[] informationObjects = informationItems.Where(item => String.IsNullOrEmpty(item.informationObjectName) == false).ToArray();
		InformationItemType[] primitiveItems = informationItems.Where(item => String.IsNullOrEmpty(item.informationObjectName)).ToArray();
		bool containsCollection = informationItems.Any(item => item.isCollection);
		string domainName = CurrentAbstraction.InstanceOfTheBall.semanticDomainName;

		if(containsCollection == false) 
        {
#>
<#+		} #>

<#+
		if(containsCollection) {
#>
			

<#+
        } else {
#>

				private void CopyContentFrom(<#= informationObjectName #> sourceObject)
				{
<#+
			foreach(var item in informationItems)
			{
#>
					<#= item.name #> = sourceObject.<#= item.name #>;
<#+
			}
#>
				}
				



<#+
        }
#>

<#+
	}
	
	void GenerateInformationItems(InformationItemType[] informationItems)
	{
		foreach(var item in informationItems)
		{
			string dataType = GetPlatformDataTypeFromLogical(item.logicalDataType, item.informationObjectName);
			bool isCollection = item.isCollection;
			if(isCollection)
            {
#>
			[DataMember]
			public List< <#= dataType #> > <#= item.name #> = new List< <#= dataType #> >();
<#+
            } else {
#>
			[DataMember]
			public <#= dataType #> <#= item.name #> { get; set; }
			private <#= dataType #> _unmodified_<#= item.name #>;
<#+
            }
		}
	}

	string GetPlatformDataTypeFromLogical(InformationItemTypeLogicalDataType logicalDataType, string informationObjectName)
	{
		switch(logicalDataType)
		{
			case InformationItemTypeLogicalDataType.Data_Binary:
				return "byte[]";
			case InformationItemTypeLogicalDataType.Number_ApproxDecimal:
				return "double";
			//case InformationItemTypeLogicalDataType.Number_CustomFormat:
			//	return "string";
			case InformationItemTypeLogicalDataType.Number_ExactDecimal:
				return "double";
			case InformationItemTypeLogicalDataType.Number_Integer:
				return "long";
			case InformationItemTypeLogicalDataType.Text_Short:
			case InformationItemTypeLogicalDataType.Text_Long:
			case InformationItemTypeLogicalDataType.ObjectLink:
				return "string";
			case InformationItemTypeLogicalDataType.Time_Date:
			case InformationItemTypeLogicalDataType.Time_DateTime:
			case InformationItemTypeLogicalDataType.Time_Time:
				return "DateTime";
			case InformationItemTypeLogicalDataType.TrueOrFalse_Boolean:
				return "bool";
			case InformationItemTypeLogicalDataType.InformationObject:
				return informationObjectName;
			default:
				throw new NotSupportedException("Logical data type not recognized: " + logicalDataType.ToString());
		}
	}


#>