<#@ template debug="true" hostSpecific="true" #>
<#@ output extension="?" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="..\..\abscommon\CommonInclude\Common\CommonCodeblocks.ttinclude" #>
<#@ include file="TheBallCore_v1_0.ttinclude" #>
<#   
	// Set abstraction specific type and single file specific extension
	//TransformGenerator< ClassModelAbstractionType >(GenerateRoot, ".designer.cs");	
	GenerateRoot();
#>
<#+ 
	public Tuple<string, string>[] GetGeneratorContent(params string[] xmlFileNames)
	{
		List<Tuple<string, string>> result = new List<Tuple<string, string>>();
		foreach(string xmlFileName in xmlFileNames)
		{
			TheBallCoreAbstractionType abs = LoadXml<TheBallCoreAbstractionType>(xmlFileName);
			CurrentAbstraction = abs;
			this.GenerationEnvironment.Clear();
			string content = TransformText();
			string outputFile = Path.GetFileNameWithoutExtension(xmlFileName) + "_dataclass.designer.cs";
			result.Add(Tuple.Create(outputFile, content));
		}
		return result.ToArray();
	}
	
	void SetCurrentAbstraction(object abs)
	{
		CurrentAbstraction = ( TheBallCoreAbstractionType ) abs;
	}
	
	TheBallCoreAbstractionType CurrentAbstraction;
	InstanceOfTheBallType CurrInstance;
	
	void GenerateRoot()
	{
		GenerateAbstraction(CurrentAbstraction);
	}

	InformationObjectType GetInformationObjectByName(string informationObjectName)
    {
		var result = CurrInstance.InformationModel.FirstOrDefault(candidate => candidate.name == informationObjectName);
		if(result == null)
			throw new ArgumentException("Information object not found with name: " + informationObjectName);
		return result;
    }

	bool IsItemIndependentMaster(InformationItemType itemType)
    {
		if(string.IsNullOrEmpty(itemType.informationObjectName))
			return false;
		return IsObjectIndependentMaster(itemType.informationObjectName);
    }

	bool IsItemMasterCollection(InformationItemType itemType)
    {
		var masterColl = GetMasterCollectionByName(CurrInstance, itemType.informationObjectName);
		return masterColl != null;
    }

	bool IsObjectIndependentMaster(string informationObjectName)
    {
		var iObject = GetInformationObjectByName(informationObjectName);
		return iObject.isIndependentMaster;
    }
	
	void GenerateAbstraction(TheBallCoreAbstractionType abstraction)
	{
		InstanceOfTheBallType instance = abstraction.InstanceOfTheBall;
		CurrInstance = instance;
		GenerateInstance(instance);
	}	

	void GenerateInstance(InstanceOfTheBallType instance)
	{
		string domainName = instance.semanticDomainName;
		string domainNameMethodPart = domainName.Replace(".", "_");
#>

using DOM=<#= instance.semanticDomainName #>;


<#+
		BeginNamespace(instance.semanticDomainName);
#>
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.IO;
using System.Xml;
using System.Linq;
#if !DEVEMU
using System.Runtime.Serialization;
using ProtoBuf;
#endif


<#+
		BeginNamespace("INT");
		GenerateInterfaceModel(instance);
		EndBlock(); // namespace
		foreach(var informationObject in instance.InformationModel)
        {
			GenerateInformationObject(informationObject);

        }
		EndBlock(); // namespace
#>

<#+
	}

	string GetTypeFromInterfaceType(InterfaceItemTypeLogicalDataType logicalInterfaceDataType)
    {
		//InterfaceItemTypeLogicalDataType dataType = (InterfaceItemTypeLogicalDataType) System.Enum.Parse(typeof(InterfaceItemTypeLogicalDataType), logicalInterfaceDataType);
		switch(logicalInterfaceDataType)
        {
			case InterfaceItemTypeLogicalDataType.TrueOrFalse_Boolean:
				return "bool";
			case InterfaceItemTypeLogicalDataType.Data_Binary:
				return "byte[]";
			case InterfaceItemTypeLogicalDataType.Number:
				return "double";
			case InterfaceItemTypeLogicalDataType.Text_Long:
			case InterfaceItemTypeLogicalDataType.Text_Short:
				return "string";
			case InterfaceItemTypeLogicalDataType.Time_Date:
			case InterfaceItemTypeLogicalDataType.Time_DateTime:
			case InterfaceItemTypeLogicalDataType.Time_Time:
				return "DateTime";
			default:
				throw new NotSupportedException("Logical interface data type not supported: " + logicalInterfaceDataType);
        }
    }

	void GenerateInterfaceModel(InstanceOfTheBallType instance)
    {
		if(instance.DigitalInterface == null)
			return;
		foreach(InterfaceObjectType interfaceObject in instance.DigitalInterface.InterfaceModel ?? new InterfaceObjectType[0])
        {
			bool customIDGeneration = interfaceObject.AutomationDefinition != null ? interfaceObject.AutomationDefinition.customIDProvider : false;
			string className = interfaceObject.name;
#>
			[DataContract]
			public partial class <#= interfaceObject.name #>
			{
<#+
			foreach(var informationField in interfaceObject.InterfaceItems ?? new object[0]) 
			{
				string fieldName;
				string typeName;
				bool isCollection;
				InterfaceItemType iItem = informationField as InterfaceItemType;
				ObjectInstanceType oItem = informationField as ObjectInstanceType;
				if(iItem != null)
                {
					fieldName = iItem.name;
					typeName = GetTypeFromInterfaceType(iItem.logicalDataType);
					isCollection = iItem.isCollection;
                } else if(oItem != null)
                {
					fieldName = oItem.name;
					typeName = oItem.interfaceObjectName;
					isCollection = oItem.isCollection;
                } else 
					throw new NotSupportedException("Field type: " + informationField.GetType().Name + " not supported");
				if(isCollection)
					typeName = typeName + "[]";
#>
				[DataMember]
				public <#= typeName #> <#= fieldName #> { get; set; }
<#+
            }
#>
			}

<#+
        }
    }

	void GenerateInformationObject(InformationObjectType informationObject)
	{
		string semanticDomainName = CurrInstance.semanticDomainName;
		string objectName = informationObject.name;
		string informationObjectName = informationObject.name;
		CollectionForType collType = informationObject.Item as CollectionForType;
		bool isCollection = collType != null;

		InformationItemsType itemsType = informationObject.Item as InformationItemsType;
		bool containsCollection = itemsType != null && itemsType.InformationItem.Any(item => item.isCollection);

		bool provideDefaultCreate = informationObject.provideCreateMethod;
		bool isIndependentMaster = informationObject.isIndependentMaster;
		bool isProtoBuf = informationObject.serializationType == InformationObjectTypeSerializationType.ProtoBuf;
		string protoBufClassAttribute = isProtoBuf ? "[ProtoContract]" : "";
		string protoBufMemberFormat = isProtoBuf ? "[ProtoMember({0})]" : "";
		bool customIDGeneration = informationObject.AutomationDefinition != null ? informationObject.AutomationDefinition.customIDProvider : false;
#>
			[DataContract] <#= protoBufClassAttribute #>
			[Serializable]
			public partial class <#= informationObjectName #> 
			{
				public <#= informationObjectName #>() 
				{
					Name = "<#= objectName #>";
					SemanticDomainName = "<#= semanticDomainName #>";
				}

				[DataMember] <#= string.Format(protoBufMemberFormat, 2000) #>
				public string ID { get; set; }

			    [IgnoreDataMember]
                public string ETag { get; set; }

                [DataMember]
                public Guid OwnerID { get; set; }

                [DataMember]
                public string RelativeLocation { get; set; }

                [DataMember] <#= string.Format(protoBufMemberFormat, 2001) #>
                public string Name { get; set; }

                [DataMember] <#= string.Format(protoBufMemberFormat, 2002) #>
                public string SemanticDomainName { get; set; }

				[DataMember]
				public string MasterETag { get; set; }

				[DataMember]
				public string GeneratedByProcessID { get; set; }


<#+
		if(isCollection) {
			CollectionForType collectionItem = informationObject.Item as CollectionForType;
			string contentObjectName = collectionItem.contentInformationObjectName;
			bool isContentItemMaster = IsObjectIndependentMaster(contentObjectName);

			bool isMasterCollection = collectionItem.collectionType == CollectionForTypeCollectionType.Master;
			bool isDerivedCollection = collectionItem.collectionType == CollectionForTypeCollectionType.DerivedFromMaster;
			bool isIndependentCollection = collectionItem.collectionType == CollectionForTypeCollectionType.Independent;
			string derivedMasterCollName = collectionItem.contentInformationObjectName + "Collection";

#>
				
				[DataMember] public List<<#= contentObjectName #>> CollectionContent = new List<<#= contentObjectName #>>();

				[DataMember] public bool IsCollectionFiltered;
				
				[DataMember] public List<string> OrderFilterIDList = new List<string>();


<#+
		} else {
			GenerateInformationObjectChoice(informationObject, informationObjectName, informationObject.Item);
		}
#>			
			}
<#+
	}

	void GenerateInformationObjectChoice(InformationObjectType informationObject, string informationObjectName, object contentItem)
	{
		InformationItemsType informationItems = contentItem as InformationItemsType;
		InformationObjectContentType objectContent = contentItem as InformationObjectContentType;
		if(informationItems != null) {
			GenerateInformationItems(informationItems.InformationItem);
		}
	}

	void GenerateInformationItems(InformationItemType[] informationItems)
	{
		foreach(var item in informationItems)
		{
			string dataType = GetPlatformDataTypeFromLogical(item.logicalDataType, item.informationObjectName);
			bool isCollection = item.isCollection;
			int protoBufTagNumber = item.fieldOrderNumber;
			string protoBufAttribute = protoBufTagNumber > 0 ? string.Format("[ProtoMember({0})]", protoBufTagNumber) : "";
			if(isCollection)
            {
#>
			[DataMember] <#= protoBufAttribute #>
			public List< <#= dataType #> > <#= item.name #> = new List< <#= dataType #> >();
<#+
            } else {
#>
			[DataMember] <#= protoBufAttribute #>
			public <#= dataType #> <#= item.name #> { get; set; }
<#+
            }
		}
	}

	string GetPlatformDataTypeFromLogical(InformationItemTypeLogicalDataType logicalDataType, string informationObjectName)
	{
		switch(logicalDataType)
		{
			case InformationItemTypeLogicalDataType.Data_Binary:
				return "byte[]";
			case InformationItemTypeLogicalDataType.Number_ApproxDecimal:
				return "double";
			//case InformationItemTypeLogicalDataType.Number_CustomFormat:
			//	return "string";
			case InformationItemTypeLogicalDataType.Number_ExactDecimal:
				return "double";
			case InformationItemTypeLogicalDataType.Number_Integer:
				return "long";
			case InformationItemTypeLogicalDataType.Text_Short:
			case InformationItemTypeLogicalDataType.Text_Long:
			case InformationItemTypeLogicalDataType.ObjectLink:
				return "string";
			case InformationItemTypeLogicalDataType.Time_Date:
			case InformationItemTypeLogicalDataType.Time_DateTime:
			case InformationItemTypeLogicalDataType.Time_Time:
				return "DateTime";
			case InformationItemTypeLogicalDataType.TrueOrFalse_Boolean:
				return "bool";
			case InformationItemTypeLogicalDataType.InformationObject:
				return informationObjectName;
			default:
				throw new NotSupportedException("Logical data type not recognized: " + logicalDataType.ToString());
		}
	}

	string GetStorageSerializationReturnValue(InformationObjectType iObj)
    {
		return "StorageSerializationType." + iObj.serializationType.ToString();
    }

	InformationObjectType[] GetMasterCollections(InstanceOfTheBallType instance)
    {
		var results = instance.InformationModel.Where(obj => {
				CollectionForType coll = obj.Item as CollectionForType;
				return coll != null && coll.collectionType == CollectionForTypeCollectionType.Master;
			}).ToArray();
		return results;
    }

	InformationObjectType GetMasterCollectionByName(InstanceOfTheBallType instance, string name)
    {
		return GetMasterCollections(instance).FirstOrDefault(coll => coll.name == name);
    }

	InformationObjectType[] GetDerivedFromMasterCollections(InstanceOfTheBallType instance)
    {
		var results = instance.InformationModel.Where(obj => {
				CollectionForType coll = obj.Item as CollectionForType;
				return coll != null && coll.collectionType == CollectionForTypeCollectionType.DerivedFromMaster;
			}).ToArray();
		return results;
    }

	InformationObjectType GetMasterCollectionForItem(InstanceOfTheBallType instance, string collItemName)
    {
		var result = instance.InformationModel.FirstOrDefault(obj => {
				CollectionForType coll = obj.Item as CollectionForType;
				return coll != null && coll.collectionType == CollectionForTypeCollectionType.Master && coll.contentInformationObjectName == collItemName;
			});
		return result;
    }


#>