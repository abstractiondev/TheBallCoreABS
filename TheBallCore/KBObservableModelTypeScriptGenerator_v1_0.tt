<#@ template debug="true" hostSpecific="true" #>
<#@ output extension="?" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="..\..\abscommon\CommonInclude\Common\CommonCodeblocks.ttinclude" #>
<#@ include file="TheBallCore_v1_0.ttinclude" #>
<#   
	// Set abstraction specific type and single file specific extension
	//TransformGenerator< ClassModelAbstractionType >(GenerateRoot, ".designer.cs");	
	GenerateRoot();
#>
<#+ 
	public Tuple<string, string>[] GetGeneratorContent(params string[] xmlFileNames)
	{
		List<Tuple<string, string>> result = new List<Tuple<string, string>>();
		foreach(string xmlFileName in xmlFileNames)
		{
			TheBallCoreAbstractionType abs = LoadXml<TheBallCoreAbstractionType>(xmlFileName);
			CurrentAbstraction = abs;
			if(abs.InstanceOfTheBall.DigitalInterface == null || abs.InstanceOfTheBall.DigitalInterface.InterfaceModel == null)
				continue;
			InstanceOfTheBallType instance = abs.InstanceOfTheBall;
			CurrInstance = instance;
			foreach(var interfaceObject in abs.InstanceOfTheBall.DigitalInterface.InterfaceModel)
            {
				CurrObject = interfaceObject;
				this.GenerationEnvironment.Clear();
				string content = TransformText();
				string outputFileName = CurrInstance.semanticDomainName + "." + CurrObject.name + ".admgen.ts";
				//string outputFile = Path.GetFileNameWithoutExtension(xmlFileName) + ".admgen.ts";
				result.Add(Tuple.Create(outputFileName, content));
            }
		}
		return result.ToArray();
	}
	
	void SetCurrentAbstraction(object abs)
	{
		CurrentAbstraction = ( TheBallCoreAbstractionType ) abs;
	}
	
	TheBallCoreAbstractionType CurrentAbstraction;
	InterfaceObjectType CurrObject;
	InstanceOfTheBallType CurrInstance;
	
	void GenerateRoot()
	{
		if(CurrObject == null)
			return;
		GenerateInterfaceObject(CurrObject);
	}

	string GetTSDataType(InterfaceItemTypeLogicalDataType logicalDataType)
    {
		switch (logicalDataType)
		{
			case InterfaceItemTypeLogicalDataType.Text_Long:
			case InterfaceItemTypeLogicalDataType.Text_Short:
				return "string";
			case InterfaceItemTypeLogicalDataType.Time_Date:
			case InterfaceItemTypeLogicalDataType.Time_Time:
			case InterfaceItemTypeLogicalDataType.Time_DateTime:
				return "Date";
			case InterfaceItemTypeLogicalDataType.Number:
				return "number";
			default:
				throw new NotSupportedException("Logical data type not supported: " + logicalDataType);
		}
    }

	void GenerateInterfaceObject(InterfaceObjectType iObj)
    {
		string objectName = iObj.name;

#>
declare var ko: any;

class <#= objectName #> {
<#+ GenerateInterfaceItems(iObj.InterfaceItems); #>

    constructor() {
		<#+ GenerateKOObservable(iObj.InterfaceItems); #>
    }
}

<#+
    }

	void GenerateKOObservable(object[] interfaceItems)
    {
		foreach(var item in interfaceItems)
        {
			dynamic dyn = item;
			string itemName = dyn.name;
			bool isCollection = dyn.isCollection;
			string observableName = isCollection ? "observableArray" : "observable";
#>
			this.<#= itemName #> = ko.<#= observableName #>(this.<#= itemName #>);
<#+
        }
    }

	void GenerateInterfaceItems(object[] interfaceItems)
    {
		foreach (var item in interfaceItems)
		{
			string itemName;
			string dataType;
			InterfaceItemType iItem = item as InterfaceItemType;
			ObjectInstanceType oItem = item as ObjectInstanceType;
			dynamic dynItem = item;
			string collectionPostFix = dynItem.isCollection ? "[]" : "";
			if(iItem != null) {
				dataType = GetTSDataType(iItem.logicalDataType);
				itemName = iItem.name;
            } else if(oItem != null) {
				dataType = oItem.interfaceObjectName;
				itemName = oItem.name;
            } else
				throw new NotSupportedException("InterfaceItem type not supported: " + item.GetType().Name);


#>
	<#= itemName #>: <#= dataType #><#= collectionPostFix #>;
<#+
		}
    }

	
#>